// Core TypeScript interfaces for Textify Content Extraction Tool
// Based on data-model.md specifications

export interface URL {
  value: string; // 원본 URL 문자열
  type: 'youtube' | 'naver' | 'unknown'; // URL 타입
  isValid: boolean; // URL 유효성 여부
  normalizedUrl?: string; // 정규화된 URL (선택적)
}

export interface ExtractedContent {
  id: string; // 고유 식별자 (UUID)
  sourceUrl: string; // 원본 URL
  sourceType: 'youtube' | 'naver';
  title: string; // 콘텐츠 제목
  content: string; // 추출된 텍스트 내용
  language?: string; // 콘텐츠 언어 (YouTube 자막용)
  timestamp: Date; // 추출 시간
  metadata: ContentMetadata; // 추가 메타데이터
}

export interface ContentMetadata {
  // YouTube 전용
  videoId?: string; // YouTube 비디오 ID
  duration?: number; // 비디오 길이 (초)
  availableLanguages?: string[]; // 사용 가능한 자막 언어
  hasTimestamps?: boolean; // 타임스탬프 포함 여부

  // Naver 블로그 전용
  blogId?: string; // 블로그 ID
  postId?: string; // 포스트 ID
  author?: string; // 작성자
  publishDate?: Date; // 발행일

  // 공통
  extractionMethod: string; // 추출 방법
  processingTime: number; // 처리 시간 (ms)
  contentLength: number; // 콘텐츠 길이
}

export interface SubtitleTrack {
  language: string; // 언어 코드 (예: 'ko', 'en')
  languageName: string; // 언어 이름 (예: '한국어', 'English')
  isAutoGenerated: boolean; // 자동 생성 자막 여부
  url: string; // 자막 파일 URL
  format: 'srt' | 'vtt' | 'ttml'; // 자막 형식
}

export interface ExtractionResult {
  success: boolean; // 성공 여부
  data?: ExtractedContent; // 성공 시 추출된 데이터
  error?: ExtractionError; // 실패 시 에러 정보
  processingTime: number; // 총 처리 시간 (ms)
  timestamp: Date; // 처리 완료 시간
}

export interface ExtractionError {
  code: ErrorCode; // 에러 코드
  message: string; // 사용자 친화적 메시지
  details?: string; // 상세 에러 정보 (개발용)
  retryable: boolean; // 재시도 가능 여부
}

export type ErrorCode =
  | 'INVALID_URL'
  | 'UNSUPPORTED_PLATFORM'
  | 'CONTENT_NOT_FOUND'
  | 'NO_SUBTITLES'
  | 'EXTRACTION_FAILED'
  | 'TIMEOUT'
  | 'RATE_LIMITED';

export interface UserSession {
  sessionId: string; // 세션 ID
  recentExtractions: ExtractedContent[]; // 최근 추출 기록 (최대 10개)
  preferences: UserPreferences; // 사용자 설정
  createdAt: Date; // 세션 생성 시간
  lastActivity: Date; // 마지막 활동 시간
}

export interface UserPreferences {
  defaultLanguage: string; // 기본 자막 언어
  showTimestamps: boolean; // 타임스탬프 표시 여부
  theme: 'light' | 'dark' | 'system'; // 테마 설정
  autoSave: boolean; // 자동 저장 여부
}

// API Request/Response types based on OpenAPI schema
export interface ExtractionRequest {
  url: string;
  options?: {
    language?: string;
    includeTimestamps?: boolean;
    format?: 'plain' | 'markdown';
  };
}

export interface ExtractionResponse {
  success: boolean;
  data?: ExtractedContent;
  error?: ExtractionError;
  processingTime: number;
  timestamp: string; // ISO string format for API
}

export interface ValidationRequest {
  url: string;
}

export interface ValidationResponse {
  valid: boolean;
  type: 'youtube' | 'naver' | 'unknown';
  normalizedUrl?: string;
  reason?: string;
}

export interface HealthResponse {
  status: 'healthy' | 'unhealthy';
  timestamp: string;
  version: string;
}

// YouTube API specific types
export interface YouTubeVideoInfo {
  id: string;
  title: string;
  duration: number;
  availableLanguages: string[];
}

export interface YouTubeSubtitleData {
  language: string;
  content: string;
  hasTimestamps: boolean;
}

// Naver Blog specific types
export interface NaverBlogInfo {
  blogId: string;
  postId: string;
  title: string;
  author?: string;
  publishDate?: Date;
}

export interface NaverBlogContent {
  title: string;
  content: string;
  author?: string;
  publishDate?: Date;
}

// Extractor interfaces
export interface ContentExtractor<T = any> {
  extract(url: string, options?: T): Promise<ExtractionResult>;
  validate(url: string): Promise<boolean>;
}

export interface YouTubeExtractorOptions {
  language?: string;
  includeTimestamps?: boolean;
}

export interface NaverExtractorOptions {
  format?: 'plain' | 'markdown';
}

// HTML Parser types
export interface ParsedContent {
  title: string;
  content: string;
  metadata: Record<string, any>;
}

export interface HTMLParserOptions {
  removeAds?: boolean;
  removeNavigation?: boolean;
  preserveFormatting?: boolean;
}
